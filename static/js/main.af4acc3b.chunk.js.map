{"version":3,"sources":["pages/Home.tsx","pages/NotFound.tsx","atoms/resultEffect.ts","components/AnswerResult.tsx","atoms/answerResults.ts","selectors/getQuestionState.ts","components/AnswerChoiceButton.tsx","components/QuestionForm.tsx","pages/Question.tsx","routes/Router.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","maxWidth","margin","textAlign","Home","classes","history","useHistory","start","useCallback","push","className","src","process","alt","Button","variant","onClick","NotFound","resultEffectState","atom","key","default","AnswerResult","result","useRecoilValue","answerResultsState","getQuestionState","selector","get","a","url","axios","response","data","width","AnswerChoiceButton","props","name","id","questionNumber","useParams","path","String","Number","answerList","setResult","useSetRecoilState","refreshQuestion","useRecoilRefresher_UNSTABLE","handleChangeSelect","answerNumber","console","log","Promise","resolve","setTimeout","title","marginBottom","QuestionForm","setAnswerResults","question","map","choice","index","Question","fallback","Router","exact","component","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af4acc3b.chunk.js","sourcesContent":["import React, { useCallback } from 'react'\nimport Button from '@mui/material/Button'\nimport { useHistory } from 'react-router'\nimport { makeStyles } from '@mui/styles'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: '900px',\n    margin: '0 auto',\n    textAlign: 'center',\n  },\n})\n\nconst Home = (): JSX.Element => {\n  const classes = useStyles()\n  const history = useHistory()\n  const start = useCallback(() => {\n    history.push('/question/1')\n  }, [])\n\n  return (\n    <main className={classes.root}>\n      <p>\n        <img src={`${process.env.PUBLIC_URL}/school_blazer_couple.png`} alt=\"中学生\" />\n      </p>\n      <Button variant=\"contained\" onClick={start}>\n        問題を開始する\n      </Button>\n      <p>全部で１０問</p>\n    </main>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nconst NotFound = (): JSX.Element => {\n  return <p>not found</p>\n}\n\nexport default NotFound\n","import { atom } from 'recoil'\n\nconst resultEffectState = atom<boolean | null>({\n  key: 'resultEffect',\n  default: null,\n})\n\nexport default resultEffectState\n","import React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport resultEffectState from '../atoms/resultEffect'\n\nconst AnswerResult = (): JSX.Element => {\n  const result = useRecoilValue(resultEffectState)\n  if (result) {\n    return <h3>正解！！！</h3>\n  } else if (result === null) {\n    return <></>\n  } else {\n    return <h3>不正解！！</h3>\n  }\n}\n\nexport default AnswerResult\n","import { atom } from 'recoil'\nimport { answerResult } from '../types/type'\n\nconst answerResultsState = atom<answerResult[]>({\n  key: 'answerResults',\n  default: [],\n})\n\nexport default answerResultsState\n","import { selector } from 'recoil'\nimport axios from 'axios'\nimport { answerResult } from '../types/type'\n\nconst getQuestionState = selector<answerResult>({\n  key: 'getQuestion',\n  get: async () => {\n    const url = process.env.REACT_APP_API_URL ?? ''\n    const response = await axios.get(url)\n    return response.data\n  },\n})\n\nexport default getQuestionState\n","import { Button } from '@mui/material'\nimport { makeStyles } from '@mui/styles'\nimport React from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { useRecoilValue, useRecoilRefresher_UNSTABLE, useSetRecoilState } from 'recoil'\nimport answerResultsState from '../atoms/answerResults'\nimport resultEffectState from '../atoms/resultEffect'\nimport getQuestionState from '../selectors/getQuestionState'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n})\n\nconst AnswerChoiceButton = (props: { name: string; id: number }): JSX.Element => {\n  const { name, id } = props\n  const classes = useStyles()\n  const { questionNumber } = useParams<{ questionNumber: string }>()\n  const path = '/question/' + String(Number(questionNumber) + 1)\n  const history = useHistory()\n  const answerList = useRecoilValue(answerResultsState)\n  const setResult = useSetRecoilState(resultEffectState)\n  const refreshQuestion = useRecoilRefresher_UNSTABLE(getQuestionState)\n  const handleChangeSelect = async () => {\n    if (answerList[0].answerNumber === id) {\n      console.log('正解')\n      setResult(true)\n    } else {\n      console.log('不正解')\n      setResult(false)\n    }\n    await new Promise((resolve) => setTimeout(resolve, 3000))\n    history.push(path)\n    setResult(null)\n    refreshQuestion()\n  }\n\n  return (\n    <Button variant=\"outlined\" className={classes.root} onClick={handleChangeSelect}>\n      {name}\n    </Button>\n  )\n}\n\nexport default AnswerChoiceButton\n","import { makeStyles } from '@mui/styles'\nimport React from 'react'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\nimport answerResultsState from '../atoms/answerResults'\nimport getQuestionState from '../selectors/getQuestionState'\nimport AnswerChoiceButton from './AnswerChoiceButton'\n\nconst useStyles = makeStyles({\n  title: {\n    marginBottom: '10px',\n  },\n})\n\nconst QuestionForm = (): JSX.Element | null => {\n  const classes = useStyles()\n  const setAnswerResults = useSetRecoilState(answerResultsState)\n  const question = useRecoilValue(getQuestionState)\n  setAnswerResults([question])\n  if (!question) null\n\n  return (\n    <section>\n      <h3 className={classes.title}>{question.question}</h3>\n      <ul>\n        {question.answerList.map((choice, index) => (\n          <li key={index}>\n            <AnswerChoiceButton name={choice} id={index} />\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default QuestionForm\n","import { makeStyles } from '@mui/styles'\nimport React, { Suspense } from 'react'\nimport AnswerResult from '../components/AnswerResult'\nimport QuestionForm from '../components/QuestionForm'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: '900px',\n    margin: '10px auto',\n    textAlign: 'center',\n  },\n})\n\nconst Question = (): JSX.Element => {\n  const classes = useStyles()\n\n  return (\n    <main className={classes.root}>\n      <Suspense fallback={<p>Loading...</p>}>\n        <QuestionForm />\n      </Suspense>\n      <AnswerResult />\n    </main>\n  )\n}\n\nexport default Question\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport Home from '../pages/Home'\nimport NotFound from '../pages/NotFound'\nimport Question from '../pages/Question'\n\nconst path = process.env.NODE_ENV === 'production' ? '/w-w' : ''\nconst Router = (): JSX.Element => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={path + '/'} component={Home} />\n        <Route exact path={path + '/question/:questionNumber'} component={Question} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\nexport default Router\n","import React from 'react'\nimport { RecoilRoot } from 'recoil'\nimport './App.css'\nimport Router from './routes/Router'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RecoilRoot>\n        <Router />\n      </RecoilRoot>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}